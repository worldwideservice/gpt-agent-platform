#!/usr/bin/env node

const http = require('http');
const https = require('https');
const { URL } = require('url');
const { exec } = require('child_process');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const CONFIG = {
  clientId: '2a5c1463-43dd-4ccc-abd0-79516f785e57',
  clientSecret: '6FhlKjCZehELKIShuUQcPHdrF9uUHKLQosf0tDsSvdTuUoahVz3EO44xzVinlbh7',
  localPort: 8081,
  domain: 'kwid'
};

let server;
let resolveCode;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const req = https.request(url, options, (res) => {
      let data = '';
      res.on('data', (chunk) => data += chunk);
      res.on('end', () => {
        try {
          const json = JSON.parse(data);
          resolve({ status: res.statusCode, data: json });
        } catch (e) {
          resolve({ status: res.statusCode, data, raw: true });
        }
      });
    });
    req.on('error', reject);
    if (options.body) req.write(options.body);
    req.end();
  });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–µ–º–∞ callback
function createLocalServer() {
  return new Promise((resolve) => {
    server = http.createServer((req, res) => {
      const url = new URL(req.url, `http://localhost:${CONFIG.localPort}`);
      const code = url.searchParams.get('code');

      if (code) {
        console.log('\n‚úÖ Authorization code –ø–æ–ª—É—á–µ–Ω!');
        console.log('üîë Code:', code.substring(0, 20) + '...');

        res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(`
<!DOCTYPE html>
<html>
<head><title>OAuth Success</title></head>
<body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
  <h1 style="color: green;">‚úÖ –£—Å–ø–µ—à–Ω–æ!</h1>
  <p>Authorization code –ø–æ–ª—É—á–µ–Ω. –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç—É –≤–∫–ª–∞–¥–∫—É.</p>
  <p><small>–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª!</small></p>
</body>
</html>
        `);

        resolve(code);
        server.close();
      } else {
        res.writeHead(400, { 'Content-Type': 'text/html; charset=utf-8' });
        res.end(`
<!DOCTYPE html>
<html>
<head><title>OAuth Error</title></head>
<body style="font-family: Arial, sans-serif; text-align: center; padding: 50px;">
  <h1 style="color: red;">‚ùå –û—à–∏–±–∫–∞</h1>
  <p>Authorization code –Ω–µ –Ω–∞–π–¥–µ–Ω.</p>
</body>
</html>
        `);
      }
    });

    server.listen(CONFIG.localPort, () => {
      console.log(`üåê –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${CONFIG.localPort}`);
    });
  });
}

// –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
async function checkExistingTokens() {
  console.log('üìã –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤...');

  const envPath = './.env.local';
  if (!require('fs').existsSync(envPath)) {
    console.log('‚ùå –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return false;
  }

  const envContent = require('fs').readFileSync(envPath, 'utf8');
  const accessToken = envContent.match(/KOMMO_TEST_ACCESS_TOKEN=(.+)/)?.[1];

  if (!accessToken) {
    console.log('‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env.local');
    return false;
  }

  console.log('‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º...');

  try {
    const response = await makeRequest(`https://${CONFIG.domain}.amocrm.ru/api/v4/users`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.status === 200) {
      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–∫–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç!');
      return true;
    } else {
      console.log('‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ');
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
    return false;
  }
}

// –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ authorization code
async function getAuthorizationCode() {
  console.log('\nüìã –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ authorization code...');

  // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ callback
  const codePromise = createLocalServer();

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OAuth URL —Å –ª–æ–∫–∞–ª—å–Ω—ã–º redirect
  const params = new URLSearchParams({
    client_id: CONFIG.clientId,
    redirect_uri: `http://localhost:${CONFIG.localPort}/callback`,
    scope: 'crm:read crm:write leads:read leads:write contacts:read contacts:write tasks:read tasks:write',
    state: `auto_${Date.now()}`,
    response_type: 'code'
  });

  const oauthUrl = `https://kommo.com/oauth?${params.toString()}`;
  console.log('üîó OAuth URL:', oauthUrl);

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
  console.log('\nüîó –û—Ç–∫—Ä—ã–≤–∞—é –±—Ä–∞—É–∑–µ—Ä...');
  try {
    if (process.platform === 'darwin') {
      exec(`open "${oauthUrl}"`);
    } else if (process.platform === 'linux') {
      exec(`xdg-open "${oauthUrl}"`);
    } else {
      exec(`start "${oauthUrl}"`);
    }
    console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –æ—Ç–∫—Ä—ã—Ç');
  } catch (error) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('üîó –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é:', oauthUrl);
  }

  console.log('\nüéØ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Kommo –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø...');

  // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
  const code = await codePromise;
  return code;
}

// –®–∞–≥ 3: –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã
async function exchangeCodeForTokens(code) {
  console.log('\nüìã –®–ê–ì 3: –û–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω—ã...');

  try {
    const response = await makeRequest('https://kommo.com/oauth/token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        client_id: CONFIG.clientId,
        client_secret: CONFIG.clientSecret,
        grant_type: 'authorization_code',
        code: code,
        redirect_uri: `http://localhost:${CONFIG.localPort}/callback`,
      }).toString()
    });

    if (response.status === 200 && response.data.access_token) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
      console.log('üîë Access Token:', response.data.access_token.substring(0, 20) + '...');
      if (response.data.refresh_token) {
        console.log('üîÑ Refresh Token:', response.data.refresh_token.substring(0, 20) + '...');
      }
      return response.data;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤:', response.data);
      return null;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤:', error.message);
    return null;
  }
}

// –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env.local
function updateEnvFile(tokens) {
  console.log('\nüìã –®–ê–ì 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env.local...');

  const fs = require('fs');
  const envPath = './.env.local';
  let envContent = '';

  if (fs.existsSync(envPath)) {
    envContent = fs.readFileSync(envPath, 'utf8');
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  const lines = envContent.split('\n');
  const updatedLines = [];
  let accessTokenUpdated = false;
  let refreshTokenUpdated = false;

  for (const line of lines) {
    if (line.startsWith('KOMMO_TEST_ACCESS_TOKEN=')) {
      updatedLines.push(`KOMMO_TEST_ACCESS_TOKEN=${tokens.access_token}`);
      accessTokenUpdated = true;
    } else if (line.startsWith('KOMMO_TEST_REFRESH_TOKEN=')) {
      updatedLines.push(`KOMMO_TEST_REFRESH_TOKEN=${tokens.refresh_token || ''}`);
      refreshTokenUpdated = true;
    } else {
      updatedLines.push(line);
    }
  }

  if (!accessTokenUpdated) {
    updatedLines.push(`KOMMO_TEST_ACCESS_TOKEN=${tokens.access_token}`);
  }
  if (!refreshTokenUpdated) {
    updatedLines.push(`KOMMO_TEST_REFRESH_TOKEN=${tokens.refresh_token || ''}`);
  }

  fs.writeFileSync(envPath, updatedLines.join('\n'), 'utf8');
  console.log('‚úÖ –§–∞–π–ª .env.local –æ–±–Ω–æ–≤–ª–µ–Ω!');
}

// –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
async function testTokens() {
  console.log('\nüìã –®–ê–ì 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤...');

  const fs = require('fs');
  const envContent = fs.readFileSync('./.env.local', 'utf8');
  const accessToken = envContent.match(/KOMMO_TEST_ACCESS_TOKEN=(.+)/)?.[1];

  if (!accessToken) {
    console.log('‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env.local');
    return false;
  }

  try {
    const response = await makeRequest(`https://${CONFIG.domain}.amocrm.ru/api/v4/users`, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.status === 200) {
      console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç! API –¥–æ—Å—Ç—É–ø–µ–Ω');
      return true;
    } else {
      console.log('‚ùå –¢–æ–∫–µ–Ω—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —Å—Ç–∞—Ç—É—Å:', response.status);
      return false;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê KOMMO OAUTH\n');
    console.log('='.repeat(50));

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
    const tokensWorking = await checkExistingTokens();
    if (tokensWorking) {
      console.log('\nüéâ –¢–æ–∫–µ–Ω—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç! –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
      return;
    }

    // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ authorization code
    const code = await getAuthorizationCode();

    // –®–∞–≥ 3: –û–±–º–µ–Ω –Ω–∞ —Ç–æ–∫–µ–Ω—ã
    const tokens = await exchangeCodeForTokens(code);
    if (!tokens) {
      console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã.');
      return;
    }

    // –®–∞–≥ 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env
    updateEnvFile(tokens);

    // –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const testResult = await testTokens();

    if (testResult) {
      console.log('\nüéâ –£–°–ü–ï–•! Kommo –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!');
      console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å:');
      console.log('npx tsx test-kommo.ts');
    } else {
      console.log('\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å, –Ω–æ —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
    }

  } catch (error) {
    console.log('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  } finally {
    if (server) {
      server.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}
