import { test, expect } from '@playwright/test'

/**
 * –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–û–õ–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –°–¢–†–ê–ù–ò–¶, –ö–ù–û–ü–û–ö –ò –§–£–ù–ö–¶–ò–ô
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ: —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–Ω–æ–ø–∫–∏, —Ñ–æ—Ä–º—ã, –º–æ–¥–∞–ª—ã, –Ω–∞–≤–∏–≥–∞—Ü–∏—é
 */

test.describe('üîç –ü–û–õ–ù–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï –í–°–ï–ì–û –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø', () => {
  const screenshotsDir = './test-screenshots'
  const baseURL = process.env.BASE_URL || 'http://localhost:3000'

  test('üìä 1. DASHBOARD - –í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∫–Ω–æ–ø–∫–∏', async ({ page }) => {
    await page.goto(baseURL)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    
    // –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ 
      path: `${screenshotsDir}/01-dashboard-complete.png`, 
      fullPage: true 
    })

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Sidebar - –≤—Å–µ –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é
    console.log('üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ Sidebar –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...')
    const sidebarLinks = [
      { text: /–∏–Ω—Ñ–æ–ø–∞–Ω–µ–ª—å|dashboard|–≥–ª–∞–≤–Ω–∞—è/i, path: '/' },
      { text: /–∞–≥–µ–Ω—Ç—ã|agents/i, path: '/agents' },
      { text: /—Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç|chat/i, path: '/chat' },
      { text: /–±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π|knowledge/i, path: '/knowledge-base' },
      { text: /–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏|integrations/i, path: '/integrations' },
      { text: /—Ç–∞—Ä–∏—Ñ—ã|pricing/i, path: '/pricing' },
      { text: /–∞–∫–∫–∞—É–Ω—Ç|account/i, path: '/account' },
      { text: /–ø–æ–¥–¥–µ—Ä–∂–∫–∞|support/i, path: '/support' },
    ]

    for (const link of sidebarLinks) {
      const linkElement = page.locator(`nav a[href="${link.path}"], [role="navigation"] a[href*="${link.path}"]`).first()
      if (await linkElement.isVisible({ timeout: 2000 }).catch(() => false)) {
        const href = await linkElement.getAttribute('href')
        console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω: ${link.path} -> ${href}`)
        await expect(linkElement).toBeVisible()
      } else {
        console.log(`  ‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω: ${link.path}`)
      }
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
    const statCards = page.locator('[class*="StatCard"], article')
    const cardCount = await statCards.count()
    console.log(`  –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${cardCount}`)
    
    for (let i = 0; i < Math.min(cardCount, 10); i++) {
      const card = statCards.nth(i)
      if (await card.isVisible({ timeout: 2000 }).catch(() => false)) {
        await card.screenshot({ 
          path: `${screenshotsDir}/01-dashboard-card-${i}.png` 
        })
      }
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
    console.log('üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤...')
    const charts = page.locator('svg, canvas, [class*="Chart"]')
    const chartCount = await charts.count()
    console.log(`  –ù–∞–π–¥–µ–Ω–æ –≥—Ä–∞—Ñ–∏–∫–æ–≤: ${chartCount}`)

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    console.log('üîò –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ Dashboard...')
    const buttons = page.locator('button, [role="button"]')
    const buttonCount = await buttons.count()
    console.log(`  –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: ${buttonCount}`)

    const buttonInfo = []
    for (let i = 0; i < Math.min(buttonCount, 20); i++) {
      const btn = buttons.nth(i)
      if (await btn.isVisible({ timeout: 1000 }).catch(() => false)) {
        const text = await btn.textContent()
        const ariaLabel = await btn.getAttribute('aria-label')
        const isEnabled = await btn.isEnabled()
        buttonInfo.push({ text: text || ariaLabel, enabled: isEnabled })
        console.log(`    –ö–Ω–æ–ø–∫–∞ ${i}: "${text || ariaLabel}" - Enabled: ${isEnabled}`)
      }
    }

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Header —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    console.log('üîù –ü—Ä–æ–≤–µ—Ä–∫–∞ Header...')
    const header = page.locator('header, [class*="Header"]')
    if (await header.isVisible({ timeout: 2000 }).catch(() => false)) {
      await header.screenshot({ path: `${screenshotsDir}/01-dashboard-header.png` })
    }
  })

  test('ü§ñ 2. AGENTS PAGE - –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞', async ({ page }) => {
    await page.goto(`${baseURL}/agents`)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    
    await page.screenshot({ 
      path: `${screenshotsDir}/02-agents-complete.png`, 
      fullPage: true 
    })

    // ‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    console.log('‚ûï –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞...')
    const createButton = page.getByRole('button', { name: /—Å–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞|—Å–æ–∑–¥–∞—Ç—å|create/i })
    if (await createButton.isVisible({ timeout: 5000 }).catch(() => false)) {
      await expect(createButton).toBeEnabled()
      await createButton.screenshot({ path: `${screenshotsDir}/02-create-button.png` })
      
      // –ö–ª–∏–∫–∞–µ–º –∏ –¥–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
      await createButton.click()
      await page.waitForTimeout(1000)
      await page.screenshot({ 
        path: `${screenshotsDir}/02-after-create-click.png`, 
        fullPage: true 
      })
    }

    // ‚úÖ –ü–æ–∏—Å–∫
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞...')
    const searchInput = page.locator('input[type="search"], input[placeholder*="–ü–æ–∏—Å–∫"]')
    if (await searchInput.isVisible({ timeout: 2000 }).catch(() => false)) {
      await searchInput.fill('—Ç–µ—Å—Ç')
      await page.waitForTimeout(200)
      await searchInput.clear()
    }

    // ‚úÖ –¢–∞–±–ª–∏—Ü–∞ –∞–≥–µ–Ω—Ç–æ–≤
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –∞–≥–µ–Ω—Ç–æ–≤...')
    const table = page.locator('table')
    if (await table.isVisible({ timeout: 5000 }).catch(() => false)) {
      await table.screenshot({ path: `${screenshotsDir}/02-agents-table.png` })
      
      const rows = table.locator('tbody tr')
      const rowCount = await rows.count()
      console.log(`  –ù–∞–π–¥–µ–Ω–æ –∞–≥–µ–Ω—Ç–æ–≤: ${rowCount}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
      for (let i = 0; i < Math.min(rowCount, 3); i++) {
        const row = rows.nth(i)
        
        // –í—Å–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
        const rowButtons = row.locator('button, a, [role="button"]')
        const btnCount = await rowButtons.count()
        console.log(`  –°—Ç—Ä–æ–∫–∞ ${i}: ${btnCount} –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`)

        for (let j = 0; j < btnCount; j++) {
          const btn = rowButtons.nth(j)
          if (await btn.isVisible({ timeout: 1000 }).catch(() => false)) {
            const text = await btn.textContent()
            console.log(`    –≠–ª–µ–º–µ–Ω—Ç ${j}: "${text}"`)
          }
        }
      }
    }
  })

  test('‚úèÔ∏è  3. AGENT EDIT - –í—Å–µ –≤–∫–ª–∞–¥–∫–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏', async ({ page }) => {
    await page.goto(`${baseURL}/agents/new`)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    
    await page.screenshot({ 
      path: `${screenshotsDir}/03-agent-edit-start.png`, 
      fullPage: true 
    })

    const tabs = [
      '–û—Å–Ω–æ–≤–Ω—ã–µ',
      '–°–¥–µ–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã',
      '–¢—Ä–∏–≥–≥–µ—Ä—ã',
      '–¶–µ–ø–æ—á–∫–∏',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
      '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ',
    ]

    for (const tabName of tabs) {
      console.log(`üìë –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∫–ª–∞–¥–∫—É: ${tabName}`)
      
      const tabButton = page.getByRole('tab', { name: new RegExp(tabName, 'i') })
      if (await tabButton.isVisible({ timeout: 5000 }).catch(() => false)) {
        await tabButton.click()
        await page.waitForTimeout(1000)

        // –°–∫—Ä–∏–Ω—à–æ—Ç –≤–∫–ª–∞–¥–∫–∏
        const safeName = tabName.replace(/\s+/g, '-').toLowerCase()
        await page.screenshot({ 
          path: `${screenshotsDir}/03-tab-${safeName}.png`, 
          fullPage: true 
        })

        // –í—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ
        const tabButtons = page.locator('button, [role="button"]')
        const tabBtnCount = await tabButtons.count()
        console.log(`  –ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: ${tabBtnCount}`)

        // –í—Å–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
        const inputs = page.locator('input, textarea, select')
        const inputCount = await inputs.count()
        console.log(`  –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ–π: ${inputCount}`)

        // –í—Å–µ toggle switches
        const toggles = page.locator('input[type="checkbox"], [role="switch"]')
        const toggleCount = await toggles.count()
        console.log(`  –ù–∞–π–¥–µ–Ω–æ toggle: ${toggleCount}`)

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É
        for (let i = 0; i < Math.min(tabBtnCount, 15); i++) {
          const btn = tabButtons.nth(i)
          if (await btn.isVisible({ timeout: 1000 }).catch(() => false)) {
            const text = await btn.textContent()
            const enabled = await btn.isEnabled()
            if (text && (text.includes('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å') || text.includes('–°–æ–∑–¥–∞—Ç—å') || text.includes('–£–¥–∞–ª–∏—Ç—å'))) {
              console.log(`    üîò "${text}" - Enabled: ${enabled}`)
            }
          }
        }
      }
    }
  })

  test('üìö 4. KNOWLEDGE BASE - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç—å–∏', async ({ page }) => {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    await page.goto(`${baseURL}/knowledge-base/categories`)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    await page.screenshot({ 
      path: `${screenshotsDir}/04-categories-complete.png`, 
      fullPage: true 
    })

    // –°—Ç–∞—Ç—å–∏
    await page.goto(`${baseURL}/knowledge-base/articles`)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    await page.screenshot({ 
      path: `${screenshotsDir}/05-articles-complete.png`, 
      fullPage: true 
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    const buttons = page.locator('button, [role="button"]')
    const btnCount = await buttons.count()
    console.log(`–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π: –Ω–∞–π–¥–µ–Ω–æ ${btnCount} –∫–Ω–æ–ø–æ–∫`)
  })

  test('üí¨ 5. CHAT - –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏', async ({ page }) => {
    await page.goto(`${baseURL}/chat`)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    await page.screenshot({ 
      path: `${screenshotsDir}/06-chat-complete.png`, 
      fullPage: true 
    })

    // Select –∞–≥–µ–Ω—Ç–∞
    const agentSelect = page.locator('select, [role="combobox"]')
    if (await agentSelect.isVisible({ timeout: 5000 }).catch(() => false)) {
      await expect(agentSelect).toBeEnabled()
    }

    // –ü–æ–ª–µ –≤–≤–æ–¥–∞
    const messageInput = page.locator('textarea, input[type="text"]')
    if (await messageInput.isVisible({ timeout: 5000 }).catch(() => false)) {
      await messageInput.fill('–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
      await page.screenshot({ 
        path: `${screenshotsDir}/06-chat-with-message.png` 
      })
    }
  })

  test('üîå 6. INTEGRATIONS - –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async ({ page }) => {
    await page.goto(`${baseURL}/integrations`)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    await page.screenshot({ 
      path: `${screenshotsDir}/07-integrations-complete.png`, 
      fullPage: true 
    })

    // –í—Å–µ –∫–Ω–æ–ø–∫–∏
    const buttons = page.locator('button, [role="button"]')
    const btnCount = await buttons.count()
    console.log(`–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: –Ω–∞–π–¥–µ–Ω–æ ${btnCount} –∫–Ω–æ–ø–æ–∫`)

    for (let i = 0; i < Math.min(btnCount, 10); i++) {
      const btn = buttons.nth(i)
      if (await btn.isVisible({ timeout: 1000 }).catch(() => false)) {
        const text = await btn.textContent()
        console.log(`  –ö–Ω–æ–ø–∫–∞ ${i}: "${text}"`)
      }
    }
  })

  test('üí∞ 7. PRICING - –í—Å–µ –ø–ª–∞–Ω—ã', async ({ page }) => {
    await page.goto(`${baseURL}/pricing`)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    await page.screenshot({ 
      path: `${screenshotsDir}/08-pricing-complete.png`, 
      fullPage: true 
    })

    // Toggle –º–µ—Å—è—á–Ω—ã–π/–≥–æ–¥–æ–≤–æ–π
    const billingToggle = page.locator('button').filter({ 
      hasText: /–µ–∂–µ–º–µ—Å—è—á–Ω–æ|–µ–∂–µ–≥–æ–¥–Ω–æ/i 
    }).first()
    if (await billingToggle.isVisible({ timeout: 5000 }).catch(() => false)) {
      await billingToggle.click()
      await page.waitForTimeout(200)
    }

    // –ö–Ω–æ–ø–∫–∏ –ø–ª–∞–Ω–æ–≤
    const planButtons = page.getByRole('button').filter({ 
      hasText: /–≤—ã–±—Ä–∞—Ç—å|–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è/i 
    })
    const planCount = await planButtons.count()
    console.log(`–ù–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–æ–∫ –ø–ª–∞–Ω–æ–≤: ${planCount}`)
  })

  test('üë§ 8. ACCOUNT - –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', async ({ page }) => {
    await page.goto(`${baseURL}/account`)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    await page.screenshot({ 
      path: `${screenshotsDir}/09-account-complete.png`, 
      fullPage: true 
    })
  })

  test('üìñ 9. SUPPORT - –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã', async ({ page }) => {
    await page.goto(`${baseURL}/support`)
    await page.waitForLoadState('networkidle', { timeout: 30000 })
    await page.screenshot({ 
      path: `${screenshotsDir}/10-support-complete.png`, 
      fullPage: true 
    })
  })

  test('üéØ 10. –ö–õ–ê–í–ò–ê–¢–£–†–ù–ê–Ø –ù–ê–í–ò–ì–ê–¶–ò–Ø', async ({ page }) => {
    await page.goto(baseURL)
    await page.waitForLoadState('networkidle', { timeout: 30000 })

    // Tab –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    for (let i = 0; i < 15; i++) {
      await page.keyboard.press('Tab')
      await page.waitForTimeout(200)
      
      const focused = await page.evaluate(() => {
        const el = document.activeElement
        return el ? {
          tag: el.tagName,
          text: el.textContent?.substring(0, 50),
          type: (el as HTMLElement).getAttribute('type'),
        } : null
      })
      
      if (focused) {
        console.log(`Tab ${i + 1}: ${focused.tag}${focused.type ? `[${focused.type}]` : ''} - "${focused.text}"`)
      }
    }
  })

  test('üì± 11. RESPONSIVE - –†–∞–∑–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è', async ({ page }) => {
    const viewports = [
      { width: 375, height: 667, name: 'mobile' },
      { width: 768, height: 1024, name: 'tablet' },
      { width: 1920, height: 1080, name: 'desktop' },
    ]

    for (const vp of viewports) {
      await page.setViewportSize({ width: vp.width, height: vp.height })
      await page.goto(baseURL)
      await page.waitForLoadState('networkidle', { timeout: 30000 })
      
      await page.screenshot({ 
        path: `${screenshotsDir}/11-responsive-${vp.name}.png`, 
        fullPage: true 
      })
      console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç ${vp.name} (${vp.width}x${vp.height})`)
    }
  })
})









