const { chromium } = require('playwright');

async function ultimateTest() {
  console.log('üéØ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ï–ù–ê - 100% –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò');
  console.log('='.repeat(80));

  const browser = await chromium.launch({ headless: true });
  const page = await browser.newPage();

  const baseUrl = 'https://gpt-agent-kwid-bxw0a8dht-world-wide-services-62780b79.vercel.app';
  let score = 0;
  let totalTests = 0;

  function testResult(name, success, details = '') {
    totalTests++;
    if (success) score++;
    const icon = success ? '‚úÖ' : '‚ùå';
    console.log(`${icon} ${name}${details ? ': ' + details : ''}`);
  }

  try {
    // –¢–ï–°–¢ 1: –î–û–°–¢–£–ü –ö –û–°–ù–û–í–ù–´–ú –°–¢–†–ê–ù–ò–¶–ê–ú
    console.log('\nüè† –¢–ï–°–¢ 1: –î–û–°–¢–£–ü –ö –û–°–ù–û–í–ù–´–ú –°–¢–†–ê–ù–ò–¶–ê–ú');

    await page.goto(baseUrl, { waitUntil: 'domcontentloaded' });
    const homeTitle = await page.title();
    testResult('–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è', homeTitle.includes('GPT Agent'), homeTitle);

    await page.goto(`${baseUrl}/login`, { waitUntil: 'domcontentloaded' });
    const loginTitle = await page.title();
    testResult('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞', loginTitle.includes('–í—Ö–æ–¥'), loginTitle);

    await page.goto(`${baseUrl}/register`, { waitUntil: 'domcontentloaded' });
    const registerTitle = await page.title();
    testResult('–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞', registerTitle.includes('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'), registerTitle);

    // –¢–ï–°–¢ 2: –ó–ê–©–ò–¢–ê –ú–ê–†–®–†–£–¢–û–í
    console.log('\nüîí –¢–ï–°–¢ 2: –ó–ê–©–ò–¢–ê –ú–ê–†–®–†–£–¢–û–í');

    await page.goto(`${baseUrl}/account`, { waitUntil: 'domcontentloaded' });
    await page.waitForTimeout(1000);
    const accountUrl = page.url();
    testResult('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /account –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è', accountUrl.includes('/login'));

    await page.goto(`${baseUrl}/agents`, { waitUntil: 'domcontentloaded' });
    await page.waitForTimeout(1000);
    const agentsUrl = page.url();
    testResult('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /agents –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è', agentsUrl.includes('/login'));

    // –¢–ï–°–¢ 3: –í–•–û–î –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê
    console.log('\nüë§ –¢–ï–°–¢ 3: –í–•–û–î –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê');

    await page.goto(`${baseUrl}/login`, { waitUntil: 'domcontentloaded' });
    await page.fill('#email', 'admin@worldwideservice.eu');
    await page.fill('#password', 'l1tmw6u977c9!Q');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(3000);

    const postLoginUrl = page.url();
    const loginSuccess = !postLoginUrl.includes('/login');
    testResult('–í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–µ–Ω', loginSuccess, `URL: ${postLoginUrl}`);

    if (loginSuccess) {
      // –¢–ï–°–¢ 4: –î–û–°–¢–£–ü –ö –ó–ê–©–ò–©–ï–ù–ù–´–ú –°–¢–†–ê–ù–ò–¶–ê–ú –ü–û–°–õ–ï –í–•–û–î–ê
      console.log('\nüîë –¢–ï–°–¢ 4: –î–û–°–¢–£–ü –ö –ó–ê–©–ò–©–ï–ù–ù–´–ú –°–¢–†–ê–ù–ò–¶–ê–ú');

      await page.goto(`${baseUrl}/account`, { waitUntil: 'domcontentloaded' });
      await page.waitForTimeout(2000);
      const accountAccessUrl = page.url();
      testResult('–î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–∫–∫–∞—É–Ω—Ç–∞', accountAccessUrl.includes('/account'), accountAccessUrl);

      await page.goto(`${baseUrl}/agents`, { waitUntil: 'domcontentloaded' });
      await page.waitForTimeout(2000);
      const agentsAccessUrl = page.url();
      testResult('–î–æ—Å—Ç—É–ø –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–≥–µ–Ω—Ç–æ–≤', agentsAccessUrl.includes('/agents'), agentsAccessUrl);

      // –¢–ï–°–¢ 5: –ö–û–ù–¢–ï–ù–¢ –°–¢–†–ê–ù–ò–¶–´ –ê–ì–ï–ù–¢–û–í
      console.log('\nü§ñ –¢–ï–°–¢ 5: –ö–û–ù–¢–ï–ù–¢ –°–¢–†–ê–ù–ò–¶–´ –ê–ì–ï–ù–¢–û–í');

      const pageTitle = await page.title();
      testResult('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π', pageTitle === '–ê–≥–µ–Ω—Ç—ã –ò–ò', pageTitle);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const pageContent = await page.textContent('body');
      const hasAgent1 = pageContent.includes('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞');
      const hasAgent2 = pageContent.includes('–ü—Ä–æ–¥–∞–∂–∏');
      testResult('–ê–≥–µ–Ω—Ç "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', hasAgent1);
      testResult('–ê–≥–µ–Ω—Ç "–ü—Ä–æ–¥–∞–∂–∏" –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è', hasAgent2);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å"
      const createButton = await page.locator('text=–°–æ–∑–¥–∞—Ç—å').first();
      const createButtonVisible = await createButton.isVisible().catch(() => false);
      testResult('–ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∞–≥–µ–Ω—Ç–∞" –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç', createButtonVisible);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏–ª–∏ —Å–ø–∏—Å–∫–∞
      const tableExists = await page.locator('table').isVisible().catch(() => false);
      const listExists = await page.locator('ul, ol').first().isVisible().catch(() => false);
      const hasTableOrList = tableExists || listExists;
      testResult('–¢–∞–±–ª–∏—Ü–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç', hasTableOrList);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–∫–∏
      const errorExists = await page.locator('text=–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞').isVisible().catch(() => false);
      testResult('–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', !errorExists);

      // –¢–ï–°–¢ 6: –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –ê–ì–ï–ù–¢–û–í
      console.log('\n‚öôÔ∏è –¢–ï–°–¢ 6: –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ –ê–ì–ï–ù–¢–û–í');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–≥–µ–Ω—Ç–∞–º–∏
      const hasActions = pageContent.includes('–ò–∑–º–µ–Ω–∏—Ç—å') || pageContent.includes('–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å') || pageContent.includes('–£–¥–∞–ª–∏—Ç—å');
      testResult('–î–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–∞–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã', hasActions);

      // –¢–ï–°–¢ 7: –ù–ê–í–ò–ì–ê–¶–ò–Ø
      console.log('\nüß≠ –¢–ï–°–¢ 7: –ù–ê–í–ò–ì–ê–¶–ò–Ø');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      const homeLink = await page.locator('a[href="/"]').first();
      const canNavigateHome = await homeLink.isVisible().catch(() => false);
      testResult('–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω–∞', canNavigateHome);

      // –¢–ï–°–¢ 8: –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨
      console.log('\nüì± –¢–ï–°–¢ 8: –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨');

      await page.setViewportSize({ width: 375, height: 667 });
      await page.waitForTimeout(1000);
      const mobileContent = await page.textContent('body');
      const mobileWorks = mobileContent.length > 100;
      testResult('–ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç', mobileWorks);

      await page.setViewportSize({ width: 1920, height: 1080 });
      await page.waitForTimeout(1000);
      const desktopContent = await page.textContent('body');
      const desktopWorks = desktopContent.length > 100;
      testResult('–î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç', desktopWorks);

    } else {
      console.log('‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç—ã –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü - –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è');
      testResult('–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü', false, '–ü—Ä–æ–ø—É—â–µ–Ω –∏–∑-–∑–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞');
    }

    // –¢–ï–°–¢ 9: API –î–û–°–¢–£–ü
    console.log('\nüåê –¢–ï–°–¢ 9: API –î–û–°–¢–£–ü');

    const healthResponse = await page.evaluate(async (baseUrl) => {
      try {
        const response = await fetch(`${baseUrl}/api/health`);
        return response.ok;
      } catch (error) {
        return false;
      }
    }, baseUrl);
    testResult('API –∑–¥–æ—Ä–æ–≤—å–µ –¥–æ—Å—Ç—É–ø–Ω–æ', healthResponse);

    // –¢–ï–°–¢ 10: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    console.log('\nüìù –¢–ï–°–¢ 10: –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');

    const timestamp = Date.now();
    const testEmail = `test-user-${timestamp}@example.com`;

    const registerResult = await page.evaluate(async (baseUrl, email) => {
      try {
        const response = await fetch(`${baseUrl}/api/auth/register`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            firstName: 'Test',
            lastName: 'User',
            email: email,
            password: 'TestPassword123!'
          })
        });
        return response.ok;
      } catch (error) {
        return false;
      }
    }, baseUrl, testEmail);
    testResult('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–±–æ—Ç–∞–µ—Ç', registerResult, testEmail);

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    testResult('–û–±—â–µ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', false, `Error: ${error.message}`);
  } finally {
    await browser.close();
  }

  // –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
  console.log('\n' + '='.repeat(80));
  console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(80));
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${score}`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${totalTests - score}`);
  console.log(`üìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${((score / totalTests) * 100).toFixed(1)}%`);

  const status = score === totalTests ? 'üéâ –ü–†–û–î–ê–ö–®–ï–ù –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!' :
                 score >= totalTests * 0.9 ? '‚úÖ –ü–†–û–î–ê–ö–®–ï–ù –ü–û–ß–¢–ò –ì–û–¢–û–í!' :
                 '‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø!';

  console.log(`\n${status}`);

  if (score < totalTests) {
    console.log('\n‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ï –¢–ï–°–¢–´:');
    // –í—ã–≤–µ–¥–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ –±—É–¥—É—â–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  }

  console.log('\nüåê –ü–†–û–î–ê–ö–®–ï–ù URL:');
  console.log(baseUrl);
  console.log('\nüë§ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†:');
  console.log('Email: admin@worldwideservice.eu');
  console.log('–ü–∞—Ä–æ–ª—å: l1tmw6u977c9!Q');

  console.log('\n' + '='.repeat(80));

  return { score, totalTests, percentage: (score / totalTests) * 100 };
}

ultimateTest().catch(console.error);
