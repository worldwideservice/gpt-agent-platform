/**
 * –°—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞ - —Å–æ–±–∏—Ä–∞–µ—Ç –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç: Knowledge Graph + Company Knowledge + Sales Scripts + Memory
 */

import { getCompanyKnowledgeForContext, getSalesScriptForStage, getObjectionResponses } from '@/lib/repositories/company-knowledge'
import { getRelatedEntities } from './knowledge-graph'
import { searchKnowledgeBase } from '@/lib/repositories/knowledge-search'

interface AgentContext {
  companyKnowledge: string
  salesScripts: string
  objectionResponses: string
  knowledgeGraph: string
  vectorSearch: string
  agentMemory: string
  instructions: string
}

interface ContextOptions {
  organizationId: string
  agentId: string | null
  pipelineStageId?: string | null
  userMessage?: string
  conversationHistory?: Array<{ role: 'user' | 'assistant'; content: string }>
}

/**
 * –°—Ç—Ä–æ–∏—Ç –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ –∫–∞–∫ —à—Ç–∞—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
 */
export const buildAgentContext = async (options: ContextOptions): Promise<AgentContext> => {
  const { organizationId, agentId, pipelineStageId, userMessage } = options

  // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∑–Ω–∞–Ω–∏–π
  const [
    companyKnowledge,
    salesScripts,
    objectionResponses,
    vectorChunks,
  ] = await Promise.all([
    // –ó–Ω–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ (–ø—Ä–æ–¥—É–∫—Ç—ã, —É—Å–ª—É–≥–∏, –ø—Ä–æ—Ü–µ—Å—Å—ã)
    getCompanyKnowledgeForContext(organizationId, agentId, pipelineStageId),
    
    // –°–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂ –¥–ª—è —ç—Ç–∞–ø–∞
    pipelineStageId ? getSalesScriptForStage(organizationId, pipelineStageId) : Promise.resolve([]),
    
    // –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
    getObjectionResponses(organizationId),
    
    // –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º
    userMessage ? searchKnowledgeBase(organizationId, userMessage, agentId, 5) : Promise.resolve([]),
  ])

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É—â–Ω–æ—Å—Ç–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Knowledge Graph (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ)
  // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö
  let knowledgeGraphContext = ''
  // –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–º–µ–Ω —Å—É—â–Ω–æ—Å—Ç–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
  const companyKnowledgeText = formatCompanyKnowledge(companyKnowledge)
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂
  const salesScriptsText = formatSalesScripts(salesScripts, pipelineStageId)
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
  const objectionResponsesText = formatObjectionResponses(objectionResponses)
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
  const vectorSearchText = formatVectorSearch(vectorChunks)

  return {
    companyKnowledge: companyKnowledgeText,
    salesScripts: salesScriptsText,
    objectionResponses: objectionResponsesText,
    knowledgeGraph: knowledgeGraphContext,
    vectorSearch: vectorSearchText,
    agentMemory: '', // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
    instructions: '', // –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≥–µ–Ω—Ç–∞
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
 */
const formatCompanyKnowledge = (knowledge: Awaited<ReturnType<typeof getCompanyKnowledgeForContext>>): string => {
  if (knowledge.length === 0) {
    return ''
  }

  const grouped = new Map<string, typeof knowledge>()
  
  for (const item of knowledge) {
    if (!grouped.has(item.category)) {
      grouped.set(item.category, [])
    }
    grouped.get(item.category)!.push(item)
  }

  let text = '\n## –ó–Ω–∞–Ω–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:\n\n'
  
  for (const [category, items] of grouped.entries()) {
    const categoryNames: Record<string, string> = {
      product: 'üì¶ –ü—Ä–æ–¥—É–∫—Ç—ã',
      service: 'üõ†Ô∏è –£—Å–ª—É–≥–∏',
      process: '‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã',
      script: 'üìù –°–∫—Ä–∏–ø—Ç—ã',
      objection: '‚ùì –í–æ–∑—Ä–∞–∂–µ–Ω–∏—è',
      company_info: 'üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏',
    }
    
    text += `### ${categoryNames[category] ?? category}\n\n`
    
    for (const item of items.slice(0, 10)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      text += `**${item.title}**\n${item.content.slice(0, 500)}...\n\n`
    }
  }

  return text
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂
 */
const formatSalesScripts = (
  scripts: Awaited<ReturnType<typeof getSalesScriptForStage>>,
  stageId?: string | null,
): string => {
  if (scripts.length === 0) {
    return ''
  }

  let text = '\n## –°–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂'
  if (stageId) {
    text += ` (–¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏)`
  }
  text += ':\n\n'

  for (const script of scripts.slice(0, 5)) { // –¢–æ–ø-5 —Å–∫—Ä–∏–ø—Ç–æ–≤
    const typeNames: Record<string, string> = {
      greeting: 'üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
      qualification: '‚ùì –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è',
      presentation: 'üéØ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
      objection_handling: 'üõ°Ô∏è –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏',
      closing: '‚úÖ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏',
    }

    text += `### ${script.title} (${typeNames[script.scriptType] ?? script.scriptType})\n`
    text += `${script.content}\n\n`
    
    if (Object.keys(script.variables).length > 0) {
      text += `*–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: ${Object.keys(script.variables).join(', ')}*\n\n`
    }
  }

  return text
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
 */
const formatObjectionResponses = (
  responses: Awaited<ReturnType<typeof getObjectionResponses>>,
): string => {
  if (responses.length === 0) {
    return ''
  }

  let text = '\n## –†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n'

  const grouped = new Map<string, typeof responses>()
  
  for (const response of responses) {
    if (!grouped.has(response.objectionType)) {
      grouped.set(response.objectionType, [])
    }
    grouped.get(response.objectionType)!.push(response)
  }

  for (const [type, items] of grouped.entries()) {
    const typeNames: Record<string, string> = {
      price: 'üí∞ –¶–µ–Ω–∞',
      timing: '‚è∞ –í—Ä–µ–º—è',
      need: '‚ùì –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å',
      competitor: 'üèÜ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç',
      trust: 'ü§ù –î–æ–≤–µ—Ä–∏–µ',
      other: 'üìå –ü—Ä–æ—á–∏–µ',
    }

    text += `### ${typeNames[type] ?? type}\n\n`
    
    for (const item of items.slice(0, 3)) {
      if (item.objectionText) {
        text += `**–í–æ–∑—Ä–∞–∂–µ–Ω–∏–µ:** "${item.objectionText}"\n`
      }
      text += `**–û—Ç–≤–µ—Ç:** ${item.responseScript}\n\n`
    }
  }

  return text
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
 */
const formatVectorSearch = (
  chunks: Awaited<ReturnType<typeof searchKnowledgeBase>>,
): string => {
  if (chunks.length === 0) {
    return ''
  }

  let text = '\n## –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n'

  for (const chunk of chunks.slice(0, 5)) {
    text += `[–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${Math.round(chunk.similarity * 100)}%]\n`
    text += `${chunk.content.slice(0, 400)}...\n\n`
    
    if (chunk.metadata.articleTitle) {
      text += `*–ò—Å—Ç–æ—á–Ω–∏–∫: ${chunk.metadata.articleTitle}*\n\n`
    }
  }

  return text
}

/**
 * –°–æ–±–∏—Ä–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
 */
export const buildFullSystemPrompt = async (
  options: ContextOptions & { agentInstructions?: string | null },
): Promise<string> => {
  const context = await buildAgentContext(options)

  const parts: string[] = []

  // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (options.agentInstructions) {
    parts.push('## –¢–≤–æ—è —Ä–æ–ª—å –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:\n')
    parts.push(options.agentInstructions.trim())
    parts.push('\n')
  }

  // –ó–Ω–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏
  if (context.companyKnowledge) {
    parts.push(context.companyKnowledge)
  }

  // –°–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂
  if (context.salesScripts) {
    parts.push(context.salesScripts)
  }

  // –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è
  if (context.objectionResponses) {
    parts.push(context.objectionResponses)
  }

  // –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
  if (context.vectorSearch) {
    parts.push(context.vectorSearch)
  }

  // Knowledge Graph
  if (context.knowledgeGraph) {
    parts.push(context.knowledgeGraph)
  }

  // –í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
  parts.push('\n## –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è:\n')
  parts.push('- –¢—ã —à—Ç–∞—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ - –¥–µ–π—Å—Ç–≤—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ\n')
  parts.push('- –ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n')
  parts.push('- –ü—Ä–∏–º–µ–Ω—è–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞ –≤–æ—Ä–æ–Ω–∫–∏\n')
  parts.push('- –†–∞–±–æ—Ç–∞–π —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã\n')
  parts.push('- –ï—Å–ª–∏ –Ω–µ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ - –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π, –ø–µ—Ä–µ–¥–∞–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É\n')
  parts.push('- –í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ —Å —Ü–µ–ª—å—é –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –≤–æ—Ä–æ–Ω–∫–µ –ø—Ä–æ–¥–∞–∂\n')
  parts.push('- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è\n')

  return parts.join('\n')
}

export type { AgentContext, ContextOptions }

