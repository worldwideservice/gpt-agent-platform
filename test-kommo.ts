// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Kommo API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
// –ó–∞–ø—É—Å–∫: npx tsx test-kommo.ts

import 'dotenv/config'
import { exit } from 'process'
import { KommoAPI } from './lib/crm/kommo.js'
import { evaluateKommoTestConfig } from './lib/env/kommo-test.js'

async function testKommoIntegration() {
  try {
    const state = evaluateKommoTestConfig()

    if (!state.enabled) {
      console.error(`‚ùå ${state.message}`)
      if (state.missing?.length) {
        console.error('   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', state.missing.join(', '))
      }
      if (state.status === 503) {
        console.error('   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ KOMMO_TEST_ENABLED=1 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞.')
      }
      exit(1)
    }

    const kommoApi = new KommoAPI(state.config)

    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kommo API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...')
    console.log('üîß API URL:', kommoApi.getBaseUrl())

    console.log('1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...')
    const users = await kommoApi.getUsers()
    console.log('   –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length)

    console.log('2Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ –ø—Ä–æ–¥–∞–∂...')
    const pipelines = await kommoApi.getPipelines()
    console.log('   –ù–∞–π–¥–µ–Ω–æ –≤–æ—Ä–æ–Ω–æ–∫:', pipelines.length)

    console.log('3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–¥–µ–ª–∫–∞–º...')
    const stats = await kommoApi.getLeadsStats()
    console.log('   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫:', stats.total)

    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
  } catch (error) {
    const message = error instanceof Error ? error.message : String(error)
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Kommo API:', message)

    if (error instanceof Error && error.stack) {
      console.error(error.stack)
    }

    exit(1)
  }
}

void testKommoIntegration()
