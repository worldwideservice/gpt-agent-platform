import { NextResponse, type NextRequest } from 'next/server'
import { z } from 'zod'

import { auth } from '@/auth'
import {
  createConversation,
  getConversationById,
  addMessageToConversation,
  getConversationMessages,
} from '@/lib/repositories/conversations'
import { searchKnowledgeBase, formatKnowledgeContext } from '@/lib/repositories/knowledge-search'
import { getAgentById } from '@/lib/repositories/agents'
import { generateChatResponse } from '@/lib/services/llm'
import { buildFullSystemPrompt, processConversationMemory } from '@/lib/services/agent-context-builder'
import { AgentActionsService } from '@/lib/services/agent-actions'
import { createKommoApiForOrg } from '@/lib/repositories/crm-connection'
import { isAgentConfiguredForStage } from '@/lib/repositories/agent-pipeline-settings'

const sendMessageSchema = z.object({
  conversationId: z.string().uuid().optional(),
  agentId: z.string().uuid().optional(),
  message: z.string().min(1, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
  useKnowledgeBase: z.boolean().optional().default(true),
  clientIdentifier: z.string().optional(), // email, phone –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞
})

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞
 */
async function analyzeAndExecuteActions(context: {
  organizationId: string
  agentId: string | null
  leadId: number
  conversationHistory: Array<{ role: 'user' | 'assistant'; content: string }>
  userMessage: string
}): Promise<void> {
  try {
    const actionsService = new AgentActionsService(context.organizationId)

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
    const suggestions = await actionsService.analyzeAndSuggestActions({
      organizationId: context.organizationId,
      agentId: context.agentId || '',
      leadId: context.leadId,
      conversationHistory: context.conversationHistory,
      userMessage: context.userMessage,
    })

    // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å > 0.7)
    if (suggestions.length > 0 && suggestions[0].confidence > 0.7) {
      const action = suggestions[0]
      if (process.env.NODE_ENV === 'development') {
        console.log(`ü§ñ –ê–≥–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ: ${action.reason} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${action.confidence})`)
      }

      await actionsService.executeSuggestedAction(action, {
        organizationId: context.organizationId,
        agentId: context.agentId || '',
        leadId: context.leadId,
        conversationHistory: context.conversationHistory,
        userMessage: context.userMessage,
      })

      if (process.env.NODE_ENV === 'development') {
        console.log(`‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${action.type}`)
      }
    }
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.error('Failed to analyze and execute actions:', error)
    }
  }
}

/**
 * @swagger
 * /api/chat:
 *   post:
 *     summary: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å –ò–ò-–∞–≥–µ–Ω—Ç–æ–º
 *     description: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-–∞–≥–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –∑–Ω–∞–Ω–∏–π –∏ –ø–∞–º—è—Ç–∏
 *     tags:
 *       - Chat
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - message
 *             properties:
 *               conversationId:
 *                 type: string
 *                 format: uuid
 *                 description: ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–µ—Å–µ–¥—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 *               agentId:
 *                 type: string
 *                 format: uuid
 *                 description: ID –ò–ò-–∞–≥–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∞–≥–µ–Ω—Ç –∏–∑ –±–µ—Å–µ–¥—ã)
 *               message:
 *                 type: string
 *                 minLength: 1
 *                 description: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *               useKnowledgeBase:
 *                 type: boolean
 *                 default: true
 *                 description: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–≤–µ—Ç–∞
 *               clientIdentifier:
 *                 type: string
 *                 description: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ (email, phone) –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
 *           example:
 *             message: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –º–Ω–µ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ–¥—É–∫—Ç—É"
 *             useKnowledgeBase: true
 *             clientIdentifier: "user@example.com"
 *     responses:
 *       200:
 *         description: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò-–∞–≥–µ–Ω—Ç–∞
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: true
 *                 conversationId:
 *                   type: string
 *                   format: uuid
 *                   description: ID –±–µ—Å–µ–¥—ã
 *                 message:
 *                   type: object
 *                   properties:
 *                     id:
 *                       type: string
 *                       format: uuid
 *                     role:
 *                       type: string
 *                       enum: [assistant]
 *                     content:
 *                       type: string
 *                       description: –û—Ç–≤–µ—Ç –ò–ò-–∞–≥–µ–Ω—Ç–∞
 *                     createdAt:
 *                       type: string
 *                       format: date-time
 *                     metadata:
 *                       type: object
 *                       properties:
 *                         model:
 *                           type: string
 *                           description: –ú–æ–¥–µ–ª—å –ò–ò
 *                         usage:
 *                           type: object
 *                           properties:
 *                             promptTokens:
 *                               type: integer
 *                             completionTokens:
 *                               type: integer
 *                             totalTokens:
 *                               type: integer
 *                         usedKnowledgeBase:
 *                           type: boolean
 *                           description: –ë—ã–ª–∞ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
 *       400:
 *         description: –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
 *                 details:
 *                   type: array
 *                   items:
 *                     type: string
 *       401:
 *         description: –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ"
 *       500:
 *         description: –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                   example: false
 *                 error:
 *                   type: string
 *                   example: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
 */
export const POST = async (request: NextRequest) => {
  const session = await auth()

  if (!session?.user?.orgId) {
    return NextResponse.json({ success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' }, { status: 401 })
  }

  try {
    const body = await request.json()
    const parsed = sendMessageSchema.safeParse(body)

    if (!parsed.success) {
      const issues = parsed.error.issues.map((issue) => issue.message)
      return NextResponse.json(
        {
          success: false,
          error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
          details: issues,
        },
        { status: 400 },
      )
    }

    const { conversationId, agentId, message, useKnowledgeBase, clientIdentifier } = parsed.data
    const organizationId = session.user.orgId
    const userId = session.user.id

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
    let conversation

    if (conversationId) {
      conversation = await getConversationById(conversationId, organizationId)
      if (!conversation) {
        return NextResponse.json({ success: false, error: '–î–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 })
      }
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
      conversation = await createConversation(organizationId, {
        agentId: agentId ?? null,
        userId,
        title: message.slice(0, 50), // –ü–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
      })
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await addMessageToConversation(conversation.id, {
      role: 'user',
      content: message,
    })

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø –≤–æ—Ä–æ–Ω–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let agentInstructions: string | null = null
    let agentModel: string | undefined
    let pipelineStageId: string | null = null
    let canUseAgent = true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞

    if (agentId || conversation.agentId) {
      const effectiveAgentId = agentId || conversation.agentId
      if (effectiveAgentId) {
        try {
          const agent = await getAgentById(effectiveAgentId, organizationId)
          if (agent) {
            agentInstructions = 'instructions' in agent ? agent.instructions ?? null : null
            agentModel = agent.model ?? undefined
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º pipeline_id –∏ stage_id –∏–∑ CRM –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞
            let pipelineId: string | null = null
            
            // –ü–æ–ª—É—á–∞–µ–º leadId –∏–∑ conversation.metadata –∏–ª–∏ –∏—â–µ–º –ø–æ clientIdentifier
            let leadId: number | null = null
            
            if (conversation.metadata && typeof conversation.metadata === 'object') {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º metadata –Ω–∞ –Ω–∞–ª–∏—á–∏–µ leadId
              if ('leadId' in conversation.metadata && typeof conversation.metadata.leadId === 'number') {
                leadId = conversation.metadata.leadId
              } else if ('lead_id' in conversation.metadata && typeof conversation.metadata.lead_id === 'number') {
                leadId = conversation.metadata.lead_id
              }
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç leadId –≤ metadata, –º–æ–∂–Ω–æ –ø–æ–∏—Å–∫–∞—Ç—å –ø–æ clientIdentifier —á–µ—Ä–µ–∑ API
            // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑ metadata
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å leadId, –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–¥–µ–ª–∫–µ –∏–∑ Kommo
            if (leadId) {
              try {
                const kommoApi = await createKommoApiForOrg(organizationId)
                if (kommoApi) {
                  const lead = await kommoApi.getLead(leadId)
                  
                  if (lead.pipeline_id) {
                    pipelineId = lead.pipeline_id.toString()
                  }
                  
                  if (lead.status_id) {
                    pipelineStageId = lead.status_id.toString()
                  }
                  
                  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞
                  if (pipelineId && pipelineStageId) {
                    const isConfigured = await isAgentConfiguredForStage(
                      effectiveAgentId,
                      organizationId,
                      pipelineId,
                      pipelineStageId,
                    )
                    
                    if (!isConfigured) {
                      canUseAgent = false
                      console.log(`Agent ${effectiveAgentId} not configured for pipeline ${pipelineId} stage ${pipelineStageId}`)
                    }
                  }
                }
              } catch (error) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ CRM, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
                console.error('Failed to fetch lead from CRM or check agent settings', error)
              }
            }
          }
        } catch (error) {
          console.error('Failed to fetch agent', error)
        }
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    const historyMessages = await getConversationMessages(conversation.id, { limit: 10 })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è LLM (—Ç–æ–ª—å–∫–æ user –∏ assistant —Å–æ–æ–±—â–µ–Ω–∏—è)
    const conversationHistory = historyMessages
      .filter((msg) => msg.role !== 'system')
      .map((msg) => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content,
      }))

    // –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —ç—Ç–∞–ø–∞ - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (!canUseAgent) {
      return NextResponse.json({
        success: false,
        error: '–ê–≥–µ–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ –≤–æ—Ä–æ–Ω–∫–∏. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ "–í–æ—Ä–æ–Ω–∫–∏"',
      }, { status: 403 })
    }

    // –°—Ç—Ä–æ–∏–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–≥–µ–Ω—Ç–∞ (–ö–ê–ì - Knowledge Augmented Generation)
    // –í–∫–ª—é—á–∞–µ—Ç: –∑–Ω–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏, —Å–∫—Ä–∏–ø—Ç—ã –ø—Ä–æ–¥–∞–∂, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è, –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫, Knowledge Graph
    let fullSystemPrompt: string | null = null

    if (useKnowledgeBase) {
      try {
        fullSystemPrompt = await buildFullSystemPrompt({
          organizationId,
          agentId: agentId || conversation.agentId || null,
          pipelineStageId,
          userMessage: message,
          conversationHistory,
          clientIdentifier: clientIdentifier || undefined,
          agentInstructions,
        })
      } catch (error) {
        console.error('Failed to build agent context', error)
        // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –º–µ—Ç–æ–¥—É
        try {
          const knowledgeChunks = await searchKnowledgeBase(
            organizationId,
            message,
            agentId || conversation.agentId || null,
            5,
          )
          if (knowledgeChunks.length > 0) {
            fullSystemPrompt = buildSystemPrompt(agentInstructions, formatKnowledgeContext(knowledgeChunks))
          } else {
            fullSystemPrompt = agentInstructions
          }
        } catch (fallbackError) {
          console.error('Fallback knowledge search failed', fallbackError)
          fullSystemPrompt = agentInstructions
        }
      }
    } else {
      fullSystemPrompt = agentInstructions
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    const llmResponse = await generateChatResponse(organizationId, message, {
      model: agentModel,
      systemPrompt: fullSystemPrompt ?? undefined,
      conversationHistory,
    })

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è buildSystemPrompt (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤—ã–π –±–∏–ª–¥–µ—Ä)
    function buildSystemPrompt(instructions: string | null, context?: string): string | null {
      if (!instructions && !context) return null
      
      const parts: string[] = []
      if (instructions) parts.push(instructions)
      if (context) {
        parts.push('\n\n## –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:\n')
        parts.push(context)
      }
      return parts.join('\n')
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    await addMessageToConversation(conversation.id, {
      role: 'assistant',
      content: llmResponse.content,
      metadata: {
        model: llmResponse.model,
        usage: llmResponse.usage,
        usedKnowledgeBase: useKnowledgeBase && (fullSystemPrompt?.includes('–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π') ?? false),
      },
    })

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–º—è—Ç—å –∞–≥–µ–Ω—Ç–∞ –∏–∑ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
    if (clientIdentifier) {
      const allMessages = await getConversationMessages(conversation.id)
      const conversationMessages = allMessages.map(msg => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content,
      }))

      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ–Ω–µ
      processConversationMemory({
        organizationId,
        agentId: agentId || conversation.agentId || null,
        clientIdentifier,
        conversationMessages,
      }).catch((error: unknown) => {
        if (process.env.NODE_ENV === 'development') {
          console.error('Memory processing failed', error)
        }
      })
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç)
    if (conversation.leadId && typeof conversation.leadId === 'number') {
      const allMessages = await getConversationMessages(conversation.id)
      const conversationHistory = allMessages.map(msg => ({
        role: msg.role as 'user' | 'assistant',
        content: msg.content,
      }))

      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–µ–π—Å—Ç–≤–∏–π –≤ —Ñ–æ–Ω–µ
      analyzeAndExecuteActions({
        organizationId,
        agentId: agentId || conversation.agentId || null,
        leadId: conversation.leadId!,
        conversationHistory,
        userMessage: message,
      }).catch((error: unknown) => {
        if (process.env.NODE_ENV === 'development') {
          console.error('Action analysis failed', error)
        }
      })
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (!conversation.title && message.length > 0) {
      // –≠—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –≤—ã—à–µ
    }

    return NextResponse.json({
      success: true,
      data: {
        conversationId: conversation.id,
        message: llmResponse.content,
        usage: llmResponse.usage,
        model: llmResponse.model,
      },
    })
  } catch (error) {
    console.error('Chat API error', error)

    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'

    return NextResponse.json(
      {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
        details: errorMessage,
      },
      { status: 500 },
    )
  }
}

/**
 * GET /api/chat - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export const GET = async (request: NextRequest) => {
  const session = await auth()

  if (!session?.user?.orgId) {
    return NextResponse.json({ success: false, error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ' }, { status: 401 })
  }

  const { searchParams } = new URL(request.url)
  const conversationId = searchParams.get('conversationId')
  const agentId = searchParams.get('agentId')

  try {
    if (conversationId) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
      const { getConversationMessages: getMessages } = await import('@/lib/repositories/conversations')
      const messages = await getMessages(conversationId)

      return NextResponse.json({
        success: true,
        data: messages,
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–∏–∞–ª–æ–≥–æ–≤
    const { getConversations } = await import('@/lib/repositories/conversations')
    const { conversations, total } = await getConversations(session.user.orgId, {
      agentId: agentId ?? null,
      userId: session.user.id,
      limit: 50,
    })

    return NextResponse.json({
      success: true,
      data: conversations,
      pagination: {
        total,
      },
    })
  } catch (error) {
    console.error('Chat GET API error', error)

    return NextResponse.json(
      {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',
      },
      { status: 500 },
    )
  }
}


