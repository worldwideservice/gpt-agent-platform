#!/usr/bin/env node

const https = require('https');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kommo
const ACCESS_TOKEN = process.env.KOMMO_TEST_ACCESS_TOKEN;
const DOMAIN = process.env.KOMMO_TEST_DOMAIN || 'kwid';

if (!ACCESS_TOKEN) {
  console.error('‚ùå KOMMO_TEST_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

console.log('üß™ –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ Kommo...\n');

async function testEndpoint(endpoint, description) {
  return new Promise((resolve) => {
    const options = {
      hostname: `${DOMAIN}.amocrm.ru`,
      path: `/api/v4/${endpoint}`,
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
        'User-Agent': 'Kommo-Test/1.0'
      }
    };

    const req = https.request(options, (res) => {
      let data = '';

      res.on('data', (chunk) => {
        data += chunk;
      });

      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          if (res.statusCode === 200) {
            console.log(`‚úÖ ${description}: –£–°–ü–ï–®–ù–û`);
            resolve(true);
          } else {
            console.log(`‚ùå ${description}: –û–®–ò–ë–ö–ê ${res.statusCode}`);
            if (jsonData.title) {
              console.log(`   –°–æ–æ–±—â–µ–Ω–∏–µ: ${jsonData.title}`);
            }
            resolve(false);
          }
        } catch (e) {
          console.log(`‚ùå ${description}: –û–®–ò–ë–ö–ê –ü–ê–†–°–ò–ù–ì–ê JSON`);
          resolve(false);
        }
      });
    });

    req.on('error', (error) => {
      console.log(`‚ùå ${description}: –°–ï–¢–ï–í–ê–Ø –û–®–ò–ë–ö–ê - ${error.message}`);
      resolve(false);
    });

    req.setTimeout(10000, () => {
      console.log(`‚ùå ${description}: –¢–ê–ô–ú–ê–£–¢`);
      req.destroy();
      resolve(false);
    });

    req.end();
  });
}

async function runTests() {
  const tests = [
    { endpoint: 'users', description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' },
    { endpoint: 'leads/pipelines', description: '–ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ—Ä–æ–Ω–æ–∫ –ø—Ä–æ–¥–∞–∂' },
    { endpoint: 'leads', description: '–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫' },
  ];

  let passed = 0;
  let total = tests.length;

  for (const test of tests) {
    const success = await testEndpoint(test.endpoint, test.description);
    if (success) passed++;
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }

  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
  console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`);
  console.log(`   –°—Ç–∞—Ç—É—Å: ${passed === total ? '‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' : '‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨'}`);

  if (passed > 0) {
    console.log(`\nüéâ –¢–æ–∫–µ–Ω—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å npx tsx test-kommo.ts –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.`);
  }
}

runTests().catch(console.error);
