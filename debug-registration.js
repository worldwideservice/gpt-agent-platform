const { chromium } = require('playwright');

async function debugRegistration() {
  console.log('üîç –ü–û–®–ê–ì–û–í–ê–Ø –û–¢–õ–ê–î–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò');

  const browser = await chromium.launch({ headless: false }); // visible browser for debugging
  const page = await browser.newPage();

  const baseUrl = 'https://gpt-agent-kwid-bxw0a8dht-world-wide-services-62780b79.vercel.app';

  try {
    console.log('1. –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
    await page.goto(`${baseUrl}/register`, { waitUntil: 'domcontentloaded' });
    await page.waitForTimeout(2000);

    console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–æ—Ä–º—ã...');
    const formExists = await page.locator('form').isVisible().catch(() => false);
    console.log('   –§–æ—Ä–º–∞ –Ω–∞–π–¥–µ–Ω–∞:', formExists);

    const emailField = await page.locator('#email').isVisible().catch(() => false);
    const passwordField = await page.locator('#password').isVisible().catch(() => false);
    const firstNameField = await page.locator('#firstName').isVisible().catch(() => false);
    const lastNameField = await page.locator('#lastName').isVisible().catch(() => false);
    const submitButton = await page.locator('button[type="submit"]').isVisible().catch(() => false);

    console.log('   –ü–æ–ª–µ email:', emailField);
    console.log('   –ü–æ–ª–µ –ø–∞—Ä–æ–ª—å:', passwordField);
    console.log('   –ü–æ–ª–µ –∏–º—è:', firstNameField);
    console.log('   –ü–æ–ª–µ —Ñ–∞–º–∏–ª–∏—è:', lastNameField);
    console.log('   –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', submitButton);

    if (!formExists || !emailField || !passwordField || !firstNameField || !lastNameField || !submitButton) {
      console.log('‚ùå –§–û–†–ú–ê –ù–ï –ü–û–õ–ù–ê–Ø! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.');
      await browser.close();
      return;
    }

    console.log('3. –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã...');
    const timestamp = Date.now();
    const testEmail = `debug-${timestamp}@test.com`;

    await page.fill('#firstName', 'Debug');
    await page.fill('#lastName', 'User');
    await page.fill('#email', testEmail);
    await page.fill('#password', 'DebugPass123!');
    await page.fill('#confirmPassword', 'DebugPass123!');

    console.log('   –î–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');

    console.log('4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã...');
    await page.click('button[type="submit"]');
    console.log('   –ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞');

    console.log('5. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (10 —Å–µ–∫—É–Ω–¥)...');
    await page.waitForTimeout(10000);

    const currentUrl = page.url();
    console.log('   –¢–µ–∫—É—â–∏–π URL:', currentUrl);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
    const errorText = await page.locator('.text-red-500, .text-red-600, .text-red-700').textContent().catch(() => '');
    if (errorText) {
      console.log('   –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', errorText);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const successToast = await page.locator('text=–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞').isVisible().catch(() => false);
    if (successToast) {
      console.log('   ‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—à–ª–∏ –ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    const isOnLoginPage = currentUrl.includes('/login');
    console.log('   –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ª–æ–≥–∏–Ω–∞:', isOnLoginPage);

    if (isOnLoginPage) {
      console.log('‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ª–æ–≥–∏–Ω.');

      console.log('6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞...');
      await page.fill('#email', testEmail);
      await page.fill('#password', 'DebugPass123!');
      await page.click('button[type="submit"]');

      console.log('   –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...');
      await page.waitForTimeout(5000);

      const afterLoginUrl = page.url();
      console.log('   URL –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞:', afterLoginUrl);

      const loginSuccess = !afterLoginUrl.includes('/login');
      console.log('   –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω:', loginSuccess);

    } else {
      console.log('‚ùå –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ù–ï –£–°–ü–ï–®–ù–ê! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ª–æ–≥–∏–Ω.');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º—ã –≤—Å–µ –µ—â–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const stillOnRegister = currentUrl.includes('/register');
      console.log('   –í—Å–µ –µ—â–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', stillOnRegister);

      if (stillOnRegister) {
        console.log('üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏ JavaScript');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ network tab –Ω–∞ –Ω–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
        console.log('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }
    }

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–¢–õ–ê–î–ö–ï:', error.message);
  } finally {
    // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å
    console.log('\nüîç –ë–†–ê–£–ó–ï–† –û–°–¢–ê–õ–°–Ø –û–¢–ö–†–´–¢–´–ú –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê');
    console.log('–ó–∞–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏');
    // await browser.close();
  }
}

debugRegistration().catch(console.error);
