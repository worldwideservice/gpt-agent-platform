#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
 */

const Redis = require('ioredis')

const REDIS_URL = process.env.REDIS_URL || 'redis://localhost:6379'

async function checkRedis() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...')
  console.log(`URL: ${REDIS_URL}`)

  const redis = new Redis(REDIS_URL, {
    maxRetriesPerRequest: 1,
    retryStrategy: (times) => {
      if (times > 3) {
        return null // –ù–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
      }
      return Math.min(times * 50, 2000)
    },
  })

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const pong = await redis.ping()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ:', pong)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const info = await redis.info('server')
    console.log('\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Redis —Å–µ—Ä–≤–µ—Ä–µ:')
    console.log(info.split('\n').slice(0, 5).join('\n'))

    // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
    await redis.set('test:connection', 'ok', 'EX', 5)
    const value = await redis.get('test:connection')
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è:', value)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    const queueName = process.env.JOB_QUEUE_NAME || 'agent-jobs'
    const queueKey = `bull:${queueName}:meta`
    const queueExists = await redis.exists(queueKey)
    console.log(`\nüì¶ –û—á–µ—Ä–µ–¥—å "${queueName}":`, queueExists ? '—Å—É—â–µ—Å—Ç–≤—É–µ—Ç' : '–±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏')

    console.log('\n‚úÖ Redis –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!')
    process.exit(0)
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis:')
    console.error(error.message)
    console.error('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:')
    console.error('1. Redis –∑–∞–ø—É—â–µ–Ω: redis-server')
    console.error('2. REDIS_URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π:', REDIS_URL)
    process.exit(1)
  } finally {
    await redis.quit()
  }
}

checkRedis()


