#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const { createClient } = require('@supabase/supabase-js')

// Load environment variables
require('dotenv').config()

const supabaseUrl = process.env.SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing SUPABASE_URL or SUPABASE_SERVICE_ROLE_KEY environment variables')
  process.exit(1)
}

// Initialize Supabase client
const supabase = createClient(supabaseUrl, supabaseServiceKey)

const SEED_DIR = path.join(__dirname, '../../supabase')

// Sample data for seeding
const sampleData = {
  knowledgeCategories: [
    {
      id: 'getting-started',
      name: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã',
      description: '–ë–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
      sort_order: 1,
    },
    {
      id: 'ai-agents',
      name: 'AI –ê–≥–µ–Ω—Ç—ã',
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–∞–≥–µ–Ω—Ç–∞–º–∏',
      sort_order: 2,
    },
    {
      id: 'crm-integration',
      name: 'CRM –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
      description: '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CRM —Å–∏—Å—Ç–µ–º',
      sort_order: 3,
    },
    {
      id: 'knowledge-base',
      name: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
      description: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏',
      sort_order: 4,
    },
    {
      id: 'analytics',
      name: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞',
      description: '–û—Ç—á–µ—Ç—ã –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
      sort_order: 5,
    },
  ],

  knowledgeArticles: [
    {
      id: 'welcome',
      category_id: 'getting-started',
      title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPT Agent Platform',
      content: `# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

GPT Agent Platform - —ç—Ç–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è AI-–∞–≥–µ–Ω—Ç–∞–º–∏.

## –û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:

- ü§ñ **AI –ê–≥–µ–Ω—Ç—ã**: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
- üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π**: –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π
- üîó **CRM –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è**: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã–º CRM —Å–∏—Å—Ç–µ–º–∞–º
- üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞**: –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- ‚öôÔ∏è **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è**: –ü—Ä–∞–≤–∏–ª–∞ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:

1. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞
2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å CRM
4. –ù–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

–£–¥–∞—á–∏ –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã! üöÄ`,
      is_published: true,
      sort_order: 1,
    },
    {
      id: 'create-agent',
      category_id: 'ai-agents',
      title: '–°–æ–∑–¥–∞–Ω–∏–µ AI-–∞–≥–µ–Ω—Ç–∞',
      content: `# –°–æ–∑–¥–∞–Ω–∏–µ AI-–∞–≥–µ–Ω—Ç–∞

## –®–∞–≥ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:
- **–ù–∞–∑–≤–∞–Ω–∏–µ**: –û–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è –∞–≥–µ–Ω—Ç–∞
- **–û–ø–∏—Å–∞–Ω–∏–µ**: –î–ª—è —á–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –∞–≥–µ–Ω—Ç
- **–ú–æ–¥–µ–ª—å**: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é AI-–º–æ–¥–µ–ª—å

## –®–∞–≥ 2: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π

–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∞–≥–µ–Ω—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
- PDF —Ñ–∞–π–ª—ã
- –î–æ–∫—É–º–µ–Ω—Ç—ã Word
- –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
- –í–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã

## –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è

–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –∫–∞–∫ –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å:
- **–¢–æ–Ω –æ–±—â–µ–Ω–∏—è**: –§–æ—Ä–º–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π
- **–°—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤**: –ö—Ä–∞—Ç–∫–∏–µ –∏–ª–∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ
- **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è**: –¢–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –∞–≥–µ–Ω—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—Ç—å

## –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∞–≥–µ–Ω—Ç–∞ –≤ —á–∞—Ç–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤ —Ä–∞–±–æ—Ç—É.`,
      is_published: true,
      sort_order: 1,
    },
  ],

  emailTemplates: [
    {
      id: 'welcome-email',
      name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ',
      subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GPT Agent Platform!',
      content: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {{name}}!

–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ GPT Agent Platform!

–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:
1. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É: {{login_url}}
2. –°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ AI-–∞–≥–µ–Ω—Ç–∞
3. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {{support_email}}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ GPT Agent Platform`,
      variables: ['name', 'login_url', 'support_email'],
    },
    {
      id: 'password-reset',
      name: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è',
      subject: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è',
      content: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {{email}}.

–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {{reset_url}}

–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.

–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ GPT Agent Platform`,
      variables: ['email', 'reset_url'],
    },
  ],

  plans: [
    {
      id: 'free',
      name: '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π',
      description: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      tier: 'free',
      price: 0,
      currency: 'RUB',
      interval: 'month',
      features: JSON.stringify([
        '–î–æ 3 AI –∞–≥–µ–Ω—Ç–æ–≤',
        '–î–æ 1 –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π',
        '50 API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É',
        '–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
      ]),
      max_agents: 3,
      max_knowledge_bases: 1,
      max_monthly_requests: 10000,
      max_storage_gb: 1,
      support_level: 'basic',
      is_active: true,
    },
    {
      id: 'premium',
      name: '–ü—Ä–µ–º–∏—É–º',
      description: '–î–ª—è —Ä–∞—Å—Ç—É—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞',
      tier: 'premium',
      price: 2990,
      currency: 'RUB',
      interval: 'month',
      features: JSON.stringify([
        '–î–æ 20 AI –∞–≥–µ–Ω—Ç–æ–≤',
        '–î–æ 10 –±–∞–∑ –∑–Ω–∞–Ω–∏–π',
        '200 API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É',
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      ]),
      max_agents: 20,
      max_knowledge_bases: 10,
      max_monthly_requests: 100000,
      max_storage_gb: 10,
      support_level: 'priority',
      is_popular: true,
      is_active: true,
    },
    {
      id: 'vip',
      name: 'VIP',
      description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
      tier: 'vip',
      price: 9990,
      currency: 'RUB',
      interval: 'month',
      features: JSON.stringify([
        '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ AI –∞–≥–µ–Ω—Ç–æ–≤',
        '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–∑ –∑–Ω–∞–Ω–∏–π',
        '1000 API –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É',
        '–í—ã–¥–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7',
        '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä',
      ]),
      max_agents: -1,
      max_knowledge_bases: -1,
      max_monthly_requests: 1000000,
      max_storage_gb: 100,
      support_level: 'dedicated',
      is_active: true,
    },
  ],
}

async function seedKnowledgeBase() {
  console.log('üå± Seeding knowledge base...')

  try {
    // Insert categories
    const { data: categories, error: catError } = await supabase
      .from('knowledge_categories')
      .upsert(sampleData.knowledgeCategories, { onConflict: 'id' })
      .select()

    if (catError) throw catError
    console.log(`‚úÖ Inserted ${categories.length} knowledge categories`)

    // Insert articles
    const { data: articles, error: artError } = await supabase
      .from('knowledge_articles')
      .upsert(sampleData.knowledgeArticles, { onConflict: 'id' })
      .select()

    if (artError) throw artError
    console.log(`‚úÖ Inserted ${articles.length} knowledge articles`)

    // Record seeding
    await supabase
      .from('seed_data')
      .upsert([
        { id: 'knowledge_categories', table_name: 'knowledge_categories', record_count: categories.length },
        { id: 'knowledge_articles', table_name: 'knowledge_articles', record_count: articles.length },
      ], { onConflict: 'id' })

  } catch (error) {
    console.error('Failed to seed knowledge base:', error)
    throw error
  }
}

async function seedEmailTemplates() {
  console.log('üìß Seeding email templates...')

  try {
    const { data: templates, error } = await supabase
      .from('email_templates')
      .upsert(sampleData.emailTemplates, { onConflict: 'id' })
      .select()

    if (error) throw error
    console.log(`‚úÖ Inserted ${templates.length} email templates`)

    // Record seeding
    await supabase
      .from('seed_data')
      .upsert({ id: 'email_templates', table_name: 'email_templates', record_count: templates.length }, { onConflict: 'id' })

  } catch (error) {
    console.error('Failed to seed email templates:', error)
    throw error
  }
}

async function seedPlans() {
  console.log('üí∞ Seeding subscription plans...')

  try {
    const { data: plans, error } = await supabase
      .from('plans')
      .upsert(sampleData.plans, { onConflict: 'id' })
      .select()

    if (error) throw error
    console.log(`‚úÖ Inserted ${plans.length} subscription plans`)

    // Record seeding
    await supabase
      .from('seed_data')
      .upsert({ id: 'plans', table_name: 'plans', record_count: plans.length }, { onConflict: 'id' })

  } catch (error) {
    console.error('Failed to seed plans:', error)
    throw error
  }
}

async function runSeeding() {
  try {
    console.log('üöÄ Starting database seeding...')

    await seedKnowledgeBase()
    await seedEmailTemplates()
    await seedPlans()

    console.log('‚úÖ Seeding complete!')

  } catch (error) {
    console.error('Seeding failed:', error)
    process.exit(1)
  }
}

async function resetData() {
  try {
    console.log('üóëÔ∏è  Resetting seed data...')

    // Delete in reverse order to maintain foreign key constraints
    await supabase.from('knowledge_articles').delete().neq('id', '')
    await supabase.from('knowledge_categories').delete().neq('id', '')
    await supabase.from('email_templates').delete().neq('id', '')
    await supabase.from('plans').delete().neq('id', '')

    // Clear seed tracking
    await supabase.from('seed_data').delete().neq('id', '')

    console.log('‚úÖ Data reset complete!')

  } catch (error) {
    console.error('Failed to reset data:', error)
    process.exit(1)
  }
}

async function showStatus() {
  try {
    console.log('üìä Seed Data Status\n')

    const { data: seedRecords, error } = await supabase
      .from('seed_data')
      .select('*')
      .order('seeded_at', { ascending: false })

    if (error) {
      console.error('Failed to fetch seed status:', error)
      return
    }

    if (seedRecords.length === 0) {
      console.log('No seed data found. Run seeding first.')
      return
    }

    seedRecords.forEach(record => {
      console.log(`${record.table_name}: ${record.record_count} records (seeded: ${new Date(record.seeded_at).toLocaleString()})`)
    })

  } catch (error) {
    console.error('Failed to get seed status:', error)
    process.exit(1)
  }
}

// CLI interface
const command = process.argv[2]

switch (command) {
  case 'run':
  case 'seed':
    runSeeding()
    break
  case 'reset':
    resetData()
    break
  case 'status':
    showStatus()
    break
  case 'knowledge':
    seedKnowledgeBase()
    break
  case 'emails':
    seedEmailTemplates()
    break
  case 'plans':
    seedPlans()
    break
  default:
    console.log('Usage:')
    console.log('  node seed.js run      - Run all seeding scripts')
    console.log('  node seed.js reset    - Reset all seed data')
    console.log('  node seed.js status   - Show seeding status')
    console.log('  node seed.js knowledge - Seed knowledge base only')
    console.log('  node seed.js emails   - Seed email templates only')
    console.log('  node seed.js plans    - Seed subscription plans only')
    process.exit(1)
}
