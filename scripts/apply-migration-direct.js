#!/usr/bin/env node

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Supabase Management API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Service Role Key –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
 */

const fs = require('fs')
const path = require('path')

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const envPath = path.join(__dirname, '..', '.env.local')
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf-8')
  envContent.split('\n').forEach(line => {
    const match = line.match(/^([^#=]+)=(.*)$/)
    if (match) {
      const key = match[1].trim()
      const value = match[2].trim().replace(/^["']|["']$/g, '')
      process.env[key] = value
    }
  })
}

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  console.error('   –¢—Ä–µ–±—É–µ—Ç—Å—è: NEXT_PUBLIC_SUPABASE_URL –∏ SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

async function executeSQL(sql) {
  // –ü–æ–ª—É—á–∞–µ–º project ref –∏–∑ URL
  const projectRef = SUPABASE_URL.match(/https?:\/\/([^.]+)\.supabase\.co/)?.[1]
  if (!projectRef) {
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å project ref –∏–∑ URL')
  }

  console.log(`üìç Project: ${projectRef}`)
  console.log(`üìç URL: ${SUPABASE_URL.replace(/\/$/, '')}\n`)

  // Supabase Management API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Database API –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ connection string
  // –ù–æ –¥–ª—è DDL –Ω—É–∂–µ–Ω –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ PostgreSQL
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º Supabase PostgREST —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
  // –ò–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ psql connection string
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Management API (–º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è DDL)
  try {
    // –î–ª—è DDL –æ–ø–µ—Ä–∞—Ü–∏–π Supabase REST API –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
    // –ù—É–∂–µ–Ω –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ PostgreSQL
    
    console.log('‚ö†Ô∏è  Supabase REST API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ DDL –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞–ø—Ä—è–º—É—é.')
    console.log('   –ù–æ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±.\n')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
    const healthCheck = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      headers: {
        'apikey': SUPABASE_SERVICE_ROLE_KEY,
        'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
      },
    })
    
    if (healthCheck.ok) {
      console.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!\n')
    } else {
      console.log(`‚ö†Ô∏è  –ü—Ä–æ–µ–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${healthCheck.status}`)
    }

    // –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ psql
    console.log('üìù –°–æ–∑–¥–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Supabase Dashboard...\n')
    
    const sqlFile = path.join(__dirname, 'apply-all-setup.sql')
    const sql = fs.readFileSync(sqlFile, 'utf-8')
    
    console.log('‚úÖ SQL —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    console.log(`   –†–∞–∑–º–µ—Ä: ${sql.length} —Å–∏–º–≤–æ–ª–æ–≤`)
    console.log(`   –°—Ç—Ä–æ–∫: ${sql.split('\n').length}\n`)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    return {
      success: true,
      message: 'SQL –≥–æ—Ç–æ–≤ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —á–µ—Ä–µ–∑ Dashboard',
      sqlLength: sql.length,
    }
  } catch (error) {
    throw error
  }
}

async function main() {
  try {
    console.log('üöÄ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î...\n')

    const sqlFile = path.join(__dirname, 'apply-all-setup.sql')
    
    if (!fs.existsSync(sqlFile)) {
      console.error(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${sqlFile}`)
      process.exit(1)
    }

    const result = await executeSQL(null)
    
    console.log('‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n')
    console.log('üìã –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π:')
    console.log('')
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard:')
    console.log(`   https://supabase.com/dashboard/project/${SUPABASE_URL.match(/https?:\/\/([^.]+)\.supabase\.co/)?.[1]}/sql/new`)
    console.log('')
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª SQL:')
    console.log(`   ${sqlFile}`)
    console.log('')
    console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å —Ñ–∞–π–ª (Ctrl+A, Ctrl+C)')
    console.log('')
    console.log('4. –í—Å—Ç–∞–≤—å—Ç–µ –≤ SQL Editor –∏ –Ω–∞–∂–º–∏—Ç–µ Run\n')
    
    // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã
    const { exec } = require('child_process')
    const projectRef = SUPABASE_URL.match(/https?:\/\/([^.]+)\.supabase\.co/)?.[1]
    
    console.log('üåê –û—Ç–∫—Ä—ã–≤–∞—é Supabase Dashboard –∏ SQL —Ñ–∞–π–ª...\n')
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º Dashboard
    exec(`open "https://supabase.com/dashboard/project/${projectRef}/sql/new"`, () => {})
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º SQL —Ñ–∞–π–ª
    exec(`open "${sqlFile}"`, () => {})
    
    setTimeout(() => {
      console.log('‚úÖ –§–∞–π–ª—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–∫—Ä—ã—Ç—å—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ')
      console.log('   –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SQL –∏–∑ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ Dashboard\n')
    }, 1000)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

