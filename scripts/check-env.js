#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */

const fs = require('fs')
const path = require('path')

const requiredVars = {
  root: [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'SUPABASE_DEFAULT_ORGANIZATION_ID',
    'OPENROUTER_API_KEY',
    'NEXT_PUBLIC_APP_URL',
  ],
  api: [
    'SUPABASE_URL',
    'SUPABASE_SERVICE_ROLE_KEY',
    'REDIS_URL',
    'ENCRYPTION_KEY',
    'OPENROUTER_API_KEY',
  ],
  worker: [
    'SUPABASE_URL',
    'SUPABASE_SERVICE_ROLE_KEY',
    'REDIS_URL',
    'ENCRYPTION_KEY',
    'OPENROUTER_API_KEY',
  ],
}

function checkEnvFile(filePath, required, context) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚ö†Ô∏è  ${context}: —Ñ–∞–π–ª ${filePath} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    return { missing: required, fileExists: false }
  }

  const content = fs.readFileSync(filePath, 'utf-8')
  const lines = content.split('\n')
  const envVars = new Set()

  for (const line of lines) {
    const match = line.match(/^([A-Z_]+)=/)
    if (match) {
      envVars.add(match[1])
    }
  }

  const missing = required.filter((varName) => !envVars.has(varName))

  return { missing, fileExists: true, envVars }
}

function main() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...\n')

  const rootPath = process.cwd()
  const rootEnv = path.join(rootPath, '.env.local')
  const apiEnv = path.join(rootPath, 'services/api/.env')
  const workerEnv = path.join(rootPath, 'services/worker/.env')

  let hasErrors = false

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ .env.local
  console.log('üìÅ –ö–æ—Ä–Ω–µ–≤–æ–π –ø—Ä–æ–µ–∫—Ç (.env.local):')
  const rootCheck = checkEnvFile(rootEnv, requiredVars.root, 'Root')
  if (!rootCheck.fileExists) {
    console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    hasErrors = true
  } else {
    if (rootCheck.missing.length === 0) {
      console.log(`   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã`)
    } else {
      console.log(`   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:`)
      rootCheck.missing.forEach((varName) => {
        console.log(`      - ${varName}`)
      })
      hasErrors = true
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ services/api/.env
  console.log('\nüìÅ Backend API (services/api/.env):')
  const apiCheck = checkEnvFile(apiEnv, requiredVars.api, 'API')
  if (!apiCheck.fileExists) {
    console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    hasErrors = true
  } else {
    if (apiCheck.missing.length === 0) {
      console.log(`   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã`)
    } else {
      console.log(`   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:`)
      apiCheck.missing.forEach((varName) => {
        console.log(`      - ${varName}`)
      })
      hasErrors = true
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ services/worker/.env
  console.log('\nüìÅ Worker (services/worker/.env):')
  const workerCheck = checkEnvFile(workerEnv, requiredVars.worker, 'Worker')
  if (!workerCheck.fileExists) {
    console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    hasErrors = true
  } else {
    if (workerCheck.missing.length === 0) {
      console.log(`   ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã`)
    } else {
      console.log(`   ‚ö†Ô∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:`)
      workerCheck.missing.forEach((varName) => {
        console.log(`      - ${varName}`)
      })
      hasErrors = true
    }
  }

  // –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  console.log('\n' + '='.repeat(50))

  if (hasErrors) {
    console.log('\n‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
    console.log('\nüìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:')
    console.log('   - docs/SETUP.md')
    console.log('   - docs/OPENROUTER_SETUP.md (–¥–ª—è OpenRouter)')
    process.exit(1)
  } else {
    console.log('\n‚úÖ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ!')
    process.exit(0)
  }
}

main()









