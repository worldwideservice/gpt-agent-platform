#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã Worker
 */

const Redis = require('ioredis')
const { Queue } = require('bullmq')

const REDIS_URL = process.env.REDIS_URL || 'redis://localhost:6379'
const QUEUE_NAME = process.env.JOB_QUEUE_NAME || 'agent-jobs'

async function checkWorker() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Worker...')
  console.log(`Redis URL: ${REDIS_URL}`)
  console.log(`Queue Name: ${QUEUE_NAME}`)

  const connection = new Redis(REDIS_URL, {
    maxRetriesPerRequest: null,
  })

  const queue = new Queue(QUEUE_NAME, { connection })

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await connection.ping()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ')

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–∏
    const queueCounts = await queue.getJobCounts()
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:')
    console.log(`  - Waiting: ${queueCounts.waiting}`)
    console.log(`  - Active: ${queueCounts.active}`)
    console.log(`  - Completed: ${queueCounts.completed}`)
    console.log(`  - Failed: ${queueCounts.failed}`)
    console.log(`  - Delayed: ${queueCounts.delayed}`)

    // –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    console.log('\nüß™ –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏...')
    const testJob = await queue.add(
      'test-job',
      { test: true, timestamp: Date.now() },
      {
        removeOnComplete: { age: 60, count: 10 },
        removeOnFail: { age: 60, count: 10 },
      },
    )
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${testJob.id}`)

    // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥)
    console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ (5 —Å–µ–∫)...')
    await new Promise((resolve) => setTimeout(resolve, 5000))

    const job = await testJob.getState()
    console.log(`üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: ${job}`)

    if (job === 'completed' || job === 'active') {
      console.log('‚úÖ Worker –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏!')
    } else if (job === 'waiting') {
      console.log('‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ –≤ –æ—á–µ—Ä–µ–¥–∏, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è')
      console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Worker –∑–∞–ø—É—â–µ–Ω:')
      console.log('   cd services/worker && npm run dev')
    } else {
      console.log(`‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${job}`)
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    await testJob.remove()
    console.log('\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞')

    await queue.close()
    await connection.quit()

    process.exit(0)
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:')
    console.error(error.message)
    console.error('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:')
    console.error('1. Redis –∑–∞–ø—É—â–µ–Ω')
    console.error('2. Worker –∑–∞–ø—É—â–µ–Ω: cd services/worker && npm run dev')
    console.error('3. –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã')
    process.exit(1)
  }
}

checkWorker()













